#!/usr/bin/env python

import subprocess
import sys
import re

def run (input):
  proc = subprocess.Popen("./trychooser", stdin=subprocess.PIPE, stdout=subprocess.PIPE)
  (stdout, _) = proc.communicate(input)
  return (stdout.split("\n")[-2], stdout)


tests = [
    ('Y', '-b do -p all -u all -t all'),
    ('N Y Y Y Y Y', '-b do -p all -u all -t all'),
    ('N N Y Y Y Y', '-b o -p all -u all -t all'),
    ('N N N Y Y Y Y', '-b d -p all -u all -t all'),
    ('N Y N 1-11 Y Y', '-b do -p linux,linux64,macosx64,win32,win64,android,android-armv6,android-noion,ics_armv7a_gecko,panda,unagi -u all -t all'),
    ('N Y N 3-4 Y Y', '-b do -p macosx64,win32 -u all -t all'),
    ('N Y N 6 Y Y', '-b do -p android -u all -t all'),
    ('N Y Y N N Y', '-b do -p all -u none -t all'),
    ('N Y Y N Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y N Y Y Y Y Y Y Y Y Y Y Y Y', '-b do -p all -u reftest,reftest-1,reftest-2,reftest-3,reftest-4,reftest-5,reftest-6,reftest-ipc,reftest-no-accel,crashtest,crashtest-1,crashtest-2,crashtest-3,crashtest-ipc,xpcshell,jsreftest,jsreftest-1,jsreftest-2,jsreftest-3,jetpack,marionette,marionette-webapi,mozmill,robocop,mochitest-1,mochitest-2,mochitest-3,mochitest-4,mochitest-5,mochitest-6,mochitest-7,mochitest-8,mochitest-bc,mochitest-o -t all'),
    ('N Y Y N Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y N Y Y Y Y Y N N N N N N Y', '-b do -p all -u reftest,reftest-1,reftest-2,reftest-3,reftest-4,reftest-5,reftest-6,reftest-ipc,reftest-no-accel,crashtest,crashtest-1,crashtest-2,crashtest-3,crashtest-ipc,xpcshell,jsreftest,jsreftest-1,jsreftest-2,jsreftest-3,jetpack,marionette,marionette-webapi,mozmill,robocop,mochitest-1,mochitest-2,mochitest-3,mochitest-4 -t all'),
    ('N Y Y N Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y N Y Y Y N N Y N N N Y Y Y', '-b do -p all -u reftest,reftest-1,reftest-2,reftest-3,reftest-4,reftest-5,reftest-6,reftest-ipc,reftest-no-accel,crashtest,crashtest-1,crashtest-2,crashtest-3,crashtest-ipc,xpcshell,jsreftest,jsreftest-1,jsreftest-2,jsreftest-3,jetpack,marionette,marionette-webapi,mozmill,robocop,mochitest-1,mochitest-2,mochitest-5,mochitest-bc,mochitest-o -t all'),
    ('N Y Y N Y N N N N N N N N N N N N N N Y Y N N N N Y Y N N N Y Y Y Y Y Y N N N Y Y Y', '-b do -p all -u xpcshell,jsreftest,marionette,marionette-webapi,mochitest-1,mochitest-2,mochitest-3,mochitest-4,mochitest-5,mochitest-bc,mochitest-o -t all'),
    ('N Y Y N Y Y N N N N N N N N Y N N N N Y Y N N N N Y Y N N Y Y Y', '-b do -p all -u reftest,crashtest,xpcshell,jsreftest,marionette,marionette-webapi,mochitests -t all'),
    ('N Y Y Y N N N N', '-b do -p all -u all -t none'),
    ('N Y Y Y N Y Y Y Y Y Y Y Y Y Y Y Y Y', '-b do -p all -u all -t tpn,nochromer,other,dirtypaint,svgr,dromaeojs,xperf,remote-ts,remote-tdhtml,remote-tsvg,remote-tpan,remote-trobopan,remote-trobocheck,remote-troboprovider,remote-trobocheck2,remote-trobocheck3,remote-tp4m_nochrome'),
    ('N Y Y Y N Y N N Y Y Y Y Y N Y Y Y Y Y Y Y Y Y Y Y', '-b do -p all -u all -t other,dirtypaint,svgr,dromaeojs,xperf,remote-ts,remote-tdhtml,remote-tsvg,remote-tpan,remote-trobopan,remote-trobocheck,remote-trobocheck2,remote-trobocheck3,remote-troboprovider,remote-tp4m_nochrome'),
    ('N Y Y Y N Y Y Y Y Y Y N Y N Y N N N N N N N N Y N', '-b do -p all -u all -t tpn,nochromer,other,dirtypaint,svgr,xperf,remote-troboprovider'),
    ('N Y Y N Y N N N N N N N N N N N N N N N N N N N N N N N N Y N N', '-b do -p all -u mochitests -t none'),
    ]

invalid_tests = [
    ('N N N N Y Y Y', ""), # No builds
    ('N Y Y N Y N N N N N N N N N N N N N N N N N N N N N N N N N N N N N N', ": try: -b do -p all -u -t none"), # Wanted unittests, none picked
    ('N Y Y Y N Y N N N N N N N N Y N N N N N N N N N N', ": try: -b do -p all -u all -t"), # Wanted talos, none picked
    ]

tests = [(a, 'try: ' + b) for (a,b) in tests]
tests += [(a, 'Invalid selection' + b) for (a,b) in invalid_tests]

def combine(output, input):
  result = ""
  matches = re.findall('.*?\[Ynh\?\]', output, re.M | re.S)
  assert matches != None
#  assert len(matches) == len(input)
  i = 0
  for match in matches:
    result += match
    if len(input) > i:
      result += " " + input[i]
    i += 1

  return result

for (input, expected) in tests:
  (output, full_output) = run("\n".join(input.split()))

  if output != expected:
    print "Fail:\n\texpected:\n\t\t" + expected + "\n\tgot:\n\t\t" + output
    print combine(full_output, input.split())
    sys.exit(-1)
  else:
    print "Pass [" + input + "]: '" + expected + "'"

